################################################################################
# DreamCollisionWorld Makefile                                                 #
################################################################################

TARGET := linux
CC := gcc
CFLAGS := -I../unit/src -Wall -std=c99 -fPIC
CPP := g++
CPPFLAGS :=
LD := ld 

# Project Name
NAME     :=CollisionWorld
OUTPUT   := lib$(NAME).so
TEST_BIN := $(NAME)Test
GL_TEST_BIN = $(NAME)GLTest

# Commands
RM      := rm -rf
CP      := cp -rf
CD      := cd
MAKE    := make
MKDIR   := mkdir -p
GDB     := gdb
SUDO    := sudo
DOXYGEN := doxygen
VIM     := vim
ECHO    := echo

# Directories
BUILD   := build
LIB     := lib
INC     := include
TEST    := test
CONF    := conf
C_OBJ   := c_obj
CPP_OBJ := cpp_obj
DOCS    := docs
C_SRC   := src/c
CPP_SRC := src/cpp
TEST    := test
GL_TEST := gl_test

# Paths
BUILD_OUT_DIR := ../$(BUILD)/$(TARGET)
LIB_OUT_DIR  := $(BUILD_OUT_DIR)/$(LIB)
INC_OUT_DIR  := $(BUILD_OUT_DIR)/$(INC)
TEST_OUT_DIR := $(BUILD_OUT_DIR)/$(TEST)
CONF_OUT_DIR := $(BUILD_OUT_DIR)/$(CONF)
DOCS_OUT_DIR := $(BUILD_OUT_DIR)/$(DOCS)

LFLAGS := -L$(LIB_OUT_DIR) -fPIC -lUnit
GL_TEST_LFLAGS := $(LFLAGS) -lGL -lGLU  -lglut

# Inputs 
SOURCES :=$(shell find $(C_SRC)/ -type f -name '*.c') # $(wildcard $(C_SRC)/*.c)
OBJECTS := $(SOURCES:$(C_SRC)/%.c=$(C_OBJ)/%.o)

CPP_SOURCES := $(shell find $(CPP_SRC)/ -type f -name '*.cpp') #$(wildcard $(CPP_SRC)/*.cpp)
CPP_OBJECTS := $(CPP_SOURCES:$(CPP_SRC)/%.cpp=$(CPP_OBJ)/%.o)

TEST_SOURCES := $(wildcard $(C_SRC)/$(TEST)/*.c)
TEST_OBJECTS := $(TEST_SOURCES:$(C_SRC)/$(TEST)/%.c=$(C_OBJ)/%.o)

GL_TEST_SOURCES := $(wildcard $(C_SRC)/$(GL_TEST)/*.c)
GL_TEST_OBJECTS := $(GL_TEST_SOURCES:$(C_SRC)/$(GL_TEST)/%.c=$(C_OBJ)/%.o)

all: $(LIB_OUT_DIR)/$(OUTPUT)

# Tests irectives ##############################################################

.PHONY: test
test: $(TEST_OUT_DIR)/$(TEST_BIN)
	LD_LIBRARY_PATH=$(LIB_OUT_DIR) $(TEST_OUT_DIR)/$(TEST_BIN) 

.PHONY: gdb_test
gdb_test: $(TEST_OUT_DIR)/$(TEST_BIN)
	LD_LIBRARY_PATH=$(LIB_OUT_DIR) $(GDB) $(TEST_OUT_DIR)/$(TEST_BIN) 

.PHONY: gl_test
gl_test: $(TEST_OUT_DIR)/$(GL_TEST_BIN)
	LD_LIBRARY_PATH=$(LIB_OUT_DIR)$(TEST_OUT_DIR)/$(GL_TEST_BIN) 

.PHONY: gl_test_gdb
gl_test_gdb: $(TEST_OUT_DIR)/$(GL_TEST_BIN)
	LD_LIBRARY_PATH=$(LIB_OUT_DIR)$(GDB) $(TEST_OUT_DIR)/$(GL_TEST_BIN) 

.PHONY: docs
docs: Doxyfile
	$(DOXYGEN)

Doxyfile: 
	$(DOXYGEN) -g
	$(VIM) Doxyfile
	$(RM)  Doxyfile.bak

# Build Objects ################################################################

$(OBJECTS): $(C_OBJ)/%.o : $(C_SRC)/%.c
	$(ECHO) $@ | sed 's/\(.*\)\/.*/\1/' | xargs $(MKDIR) 
	$(CC) $(CFLAGS) -c $< -g -o $@

$(CPP_OBJECTS): $(CPP_OBJ)/%.o : $(CPP_SRC)/%.cpp
	$(ECHO) $@ | sed 's/\(.*\)\/.*/\1/' | xargs $(MKDIR) 
	$(CPP) $(CPPFLAGS) -c $< -g -o $@

$(TEST_OBJECTS): $(C_OBJ)/%.o : $(C_SRC)/$(TEST)/%.c
	$(MKDIR) $(C_OBJ) 
	$(CC) $(CFLAGS) -c $< -o $@

$(GL_TEST_OBJECTS): $(C_OBJ)/%.o : $(C_SRC)/$(GL_TEST)/%.c
	$(MKDIR) $(C_OBJ) 
	$(CC) $(CFLAGS) -c $< -o $@

# Build Binaries ###############################################################

$(LIB_OUT_DIR)/$(OUTPUT): $(C_OBJECTS) $(CPP_OBJECTS)
	$(CC) -shared $(C_OBJECTS) $(LFLAGS) -o $@

$(TEST_OUT_DIR)/$(TEST_BIN): $(C_OBJECTS) $(TEST_OBJECTS)
	$(CC) $(C_OBJECTS) $(TEST_OBJECTS) $(LFLAGS) -o $@

$(TEST_OUT_DIR)/$(GL_TEST_BIN): $(C_OBJECTS) $(GL_TEST_OBJECTS)
	$(CC) $(C_OBJECTS) $(GL_TEST_OBJECTS) $(LFLAGS) $(GL_TEST_LFLAGS) -o $@

# Clean ######################################################################## 

.PHONY: clean
clean:
	$(RM) $(C_OBJ)
	$(RM) $(CPP_OBJ)
	$(RM) $(DOCS) 
